/*
PDFGen API

The PDFGen API for HTML to PDF generation.

API version: 1.0
Contact: support@pdfgen.dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pdfgen

import (
	"encoding/json"
)

// checks if the UpdateTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTemplateRequest{}

// UpdateTemplateRequest struct for UpdateTemplateRequest
type UpdateTemplateRequest struct {
	// Alias of template
	Alias *string `json:"alias,omitempty"`
	// HTML used for generation
	Html *string `json:"html,omitempty"`
	// Name of template
	Name *string `json:"name,omitempty"`
}

// NewUpdateTemplateRequest instantiates a new UpdateTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTemplateRequest() *UpdateTemplateRequest {
	this := UpdateTemplateRequest{}
	return &this
}

// NewUpdateTemplateRequestWithDefaults instantiates a new UpdateTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTemplateRequestWithDefaults() *UpdateTemplateRequest {
	this := UpdateTemplateRequest{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *UpdateTemplateRequest) SetAlias(v string) {
	o.Alias = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *UpdateTemplateRequest) SetHtml(v string) {
	o.Html = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTemplateRequest) SetName(v string) {
	o.Name = &v
}

func (o UpdateTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableUpdateTemplateRequest struct {
	value *UpdateTemplateRequest
	isSet bool
}

func (v NullableUpdateTemplateRequest) Get() *UpdateTemplateRequest {
	return v.value
}

func (v *NullableUpdateTemplateRequest) Set(val *UpdateTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTemplateRequest(val *UpdateTemplateRequest) *NullableUpdateTemplateRequest {
	return &NullableUpdateTemplateRequest{value: val, isSet: true}
}

func (v NullableUpdateTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


